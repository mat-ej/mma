meta:
#    import_tasks_from: features.yaml

    # Extract upstream dependencies from source code. If False, tasks
    # must declare dependencies using the "upstream" key
    extract_upstream: False

    # Extract product from source code. If False, tasks must have a "product" key
    extract_product: False

executor: serial

tasks:
    - source: func.util.data_transform
      name: data-transform
      upstream: null
      product: products/data/data.csv
      params:
        file_path: '{{root}}/{{DATA_FILEPATH}}'

    - source: scripts/features.py
      name: features-alt
      upstream: [ data-transform ]
      product:
        data: products/data/features_alt.csv
        nb: products/reports/features_alt.ipynb
      params:
        features: '{{features}}'
        target: '{{TARGET_ALT}}'

    - source: func.util.split_train_test_op_alt
      name: split-train-test-alt
      upstream: [ features-alt ]
      product:
        train: products/data/train_alt.csv
        test: products/data/test_alt.csv
        train_odds: products/data/train_odds_alt.csv
        test_odds: products/data/test_odds_alt.csv
      params:
        test_ratio: '{{TEST_RATIO}}'

    - source: scripts/fit_pytorch_alt.py
      name: fit-pytorch-alt
      upstream: [ split-train-test-alt ]
      product:
        nb: products/reports/fit_pytorch_alt.ipynb
        model_state_dict: products/models/pytorch_state_dict_alt.pt
        model: products/models/pytorch_alt.pt
      params:
        target: '{{TARGET_ALT}}'
        pytorch_conf: '{{pytorch_conf}}'
        random_seed: '{{RANDOM_SEED}}'
        validation_ratio: 0.2
        odds_cols: ''

    - source: scripts/eval_pytorch_alt.py
      name: eval-pytorch-alt
      upstream: [ split-train-test-alt, fit-pytorch-alt ]
      product:
        nb: products/reports/eval_pytorch_alt.ipynb
      params:
        target: '{{TARGET_ALT}}'
        pytorch_conf: '{{pytorch_conf}}'
        odds_cols: '{{odds_cols_alt}}'
        bootstrap_repetitions: 3
        kelly_fraction: 0.05
