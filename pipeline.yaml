meta:
#    import_tasks_from: features.yaml

    # Extract upstream dependencies from source code. If False, tasks
    # must declare dependencies using the "upstream" key
    extract_upstream: False

    # Extract product from source code. If False, tasks must have a "product" key
    extract_product: False

executor: serial

tasks:
    - source: func.util.data_transform
      name: data-transform
      upstream: null
      product: products/data/data.csv
      params:
        file_path: '{{root}}/{{DATA_FILEPATH}}'

    - source: scripts/features.py
      name: features
      upstream: [data-transform]
      product:
        data: products/data/features.csv
        nb: products/reports/features.ipynb
      params:
        features: '{{features}}'
        target: '{{TARGET}}'

    - source: func.util.split_train_test_op
      name: split-train-test
      upstream: [features]
      product:
        train: products/data/train.csv
        test: products/data/test.csv
      params:
        test_ratio: '{{TEST_RATIO}}'

    - source: scripts/fit_sklearn_automl.py
      name: automl-sklearn
      upstream: [split-train-test]
      product:
        nb: products/reports/fit-sklearn-automl.ipynb
        model: products/models/sklearn-automl.pickle
      params:
        target: '{{TARGET}}'
        random_seed: '{{RANDOM_SEED}}'
        autosklearn_config: '{{autosklearn_config}}'

    - source: scripts/fit_h2o_automl.py
      name: automl-h2o
      upstream: [split-train-test]
      product:
        nb: products/reports/fit_h2o_automl.ipynb
      params:
        target: '{{TARGET}}'
        random_seed: '{{RANDOM_SEED}}'
        factors: '{{factors}}'
        h2oautoml_config: '{{h2oautoml_config}}'
        models_path: '{{root}}/products/models/h2o'

    - source: ntb/automl_evaluation.ipynb
      name: automl-eval
      upstream: [automl-sklearn, automl-h2o, split-train-test]
      product:
        nb: products/reports/automl_evaluation.ipynb
        autosklearn_matrix: products/reports/autosklearn_matrix.html
      params:
        target: '{{TARGET}}'

    - source: scripts/fit_pytorch.py
      name: fit-pytorch
      upstream: [split-train-test]
      product:
        nb: products/reports/fit_pytorch.ipynb
        model: products/models/pytorch.pt
      params:
        target: '{{TARGET}}'
        pytorch_config: '{{pytorch_config}}'
        validation_ratio: 0.2

    - source: scripts/evaluate_pytorch.py
      name: eval-pytorch
      upstream: [ split-train-test, fit-pytorch]
      product:
        nb: products/reports/evaluate_pytorch.ipynb
      params:
        target: '{{TARGET}}'
        pytorch_config: '{{pytorch_config}}'


#    - source: scripts/fit-h2o.py
#      name: fit-h2o.py
#      upstream: [ 'split-train-test' ]
#      product:
#        nb: products/reports/fit-h2o.ipynb
#        model: products/models/fit-h2o.pickle


#    - source: tasks.fit.fit
#      name: fit-
#      upstream: [ 'features' ]
#      product:
#        model: products/model.pickle
#      # we need to turn this off because parameters depend on the type of model
##      static_analysis: false
#
#      grid:
#      - model: sklearn.ensemble.RandomForestClassifier
#        n_estimators: [5, 10, 20]
#        criterion: [gini, entropy]
#        track: '{{track}}'
#        mlflow_tracking_uri: '{{mlflow_tracking_uri}}'
##      on_finish: hooks.store_report
#
#    - source: scripts/compare.py
#      product: products/compare.ipynb
#      params:
#        mlflow_tracking_uri: '{{mlflow_tracking_uri}}'

#      - model: sklearn.ensemble.AdaBoostClassifier
#        n_estimators: [1, 3, 5]
#        learning_rate: [1, 2]
#      params:
#          model: sklearn.ensemble.RandomForestClassifier
#          model_args:
#            n_estimators: 10
#            criterion: gini
##            params_names: [[n_estimators, criterion]]
